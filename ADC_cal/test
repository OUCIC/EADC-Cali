import torch
import torch.nn as nn
import scipy.io as sio
import numpy as np
import os
from model import TCN_FCNN

parser = argparse.ArgumentParser()
parser.add_argument('--batch_size', type=int, default=100, metavar='N',
                    help='batch size (default: 100)')
parser.add_argument('--dropout', type=float, default=0.0,
                    help='dropout applied to layers (default: 0.0)')
parser.add_argument('--clip', type=float, default=-1,
                    help='gradient clip, -1 means no clip (default: -1)')
parser.add_argument('--epochs', type=int, default=1000,
                    help='upper epoch limit (default: 1000)')
parser.add_argument('--ksize', type=int, default=8,
                    help='kernel size (default: 8)')
parser.add_argument('--levels', type=int, default=8,
                    help='# of levels (default: 8)')
parser.add_argument('--seq_len', type=int, default=400,
                    help='sequence length (default: 400)')
parser.add_argument('--log-interval', type=int, default=100, metavar='N',
                    help='report interval (default: 100')
parser.add_argument('--lr', type=float, default=0.001,
                    help='initial learning rate (default: 4e-3)')
parser.add_argument('--optim', type=str, default='Adam',
                    help='optimizer to use (default: Adam)')
parser.add_argument('--nhid', type=int, default=16,
                    help='number of hidden units per layer (default: 16)')
parser.add_argument('--seed', type=int, default=1111,
                    help='random seed (default: 1111)')
args = parser.parse_args()

input_channels = 1
output_channels = 1
batch_size = args.batch_size
epochs = args.epochs
channel_sizes = [args.nhid]*args.levels
kernel_size = args.ksize
dropout = args.dropout

model = TCN_FCNN(input_channels, output_channels,channel_sizes,kernel_size=kernel_size, dropout=dropout)
checkpoint = torch.load('Your model file path')
model.load_state_dict(checkpoint)

testdata=DataLoader('Your test data path')
tensor_data1 = torch.FloatTensor(testdata)
outputs = model(tensor_data1.unsqueeze(1))
reshaped_tensor = outputs+tensor_data1
numpy_array = reshaped_tensor.detach().numpy()

##Subsequent performance indicator analysis
##...
